---
import type { GetStaticPathsOptions } from "astro";
import { getCollection } from "astro:content";
import BaseLayout from "~/layouts/BaseLayout.astro";

export async function getStaticPaths({ paginate }: GetStaticPathsOptions) {
  const posts = await getCollection("blog", (entry) =>
    process.env["NODE_ENV"] === "production" ? !entry.data.draft : true
  );

  return paginate(posts, { pageSize: 3 });
}

const { page } = Astro.props;
const currentPage = page.currentPage ?? 1;
---

<BaseLayout
  title={`Blog${currentPage > 1 ? ` â€” Page ${currentPage}` : ""}`}
  description=""
>
  <h1 class="sr-only">Blog</h1>
  <section>
    <h2 class="font-bold text-2xl text-neutral-100 mb-8">All Posts</h2>
    <ul class="flex flex-col space-y-4 w-full">
      {
        page.data.map((post) => (
          <li>
            <a href={`/blog/${post.slug}`}>
              <article class="bg-neutral-800 p-8 rounded">
                <p class="text-xs font-bold uppercase tracking-widest text-neutral-400 mb-4">
                  {post.data.category}
                </p>
                <h3 class="text-lg text-neutral-50 mb-2">{post.data.title}</h3>
                <p class="text-neutral-400 mb-8">{post.data.summary}</p>
                <div class="flex justify-between">
                  <ul class="flex gap-3">
                    {post.data.tags.map((tag) => (
                      <li>{tag}</li>
                    ))}
                  </ul>
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke-width="1.5"
                    stroke="currentColor"
                    class="w-8 h-8 text-neutral-100"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      d="M4.5 12h15m0 0l-6.75-6.75M19.5 12l-6.75 6.75"
                    />
                  </svg>
                </div>
              </article>
            </a>
          </li>
        ))
      }
    </ul>
    <!-- <pre>{JSON.stringify({
      start: page.start,
    end: page.end,
    size: page.size,
    total: page.total,
    currentPage: page.currentPage,
    lastPage: page.lastPage,
    url: page.url
    }, null, 2)}</pre>
    <p>Page {page.currentPage} / {page.total}</p> -->
    <div class="flex justify-between">
      <div>
        {page.url.prev && <a href={page.url.prev}>Prev</a>}
      </div>
      <div>{page.currentPage} / {page.lastPage}</div>
      <div>
        {page.url.next && <a href={page.url.next}>Next</a>}
      </div>
    </div>
  </section>
</BaseLayout>
